{"version":3,"sources":["views/game/Settings/CurrencyNameSelect.js","views/game/Settings/AdvancedSettings.js","views/game/Settings/MainSettings.js","views/game/Settings/DeleteGameDialog.js","views/game/Settings/TopUpStartCurrencyDialog.js","views/game/Settings/index.js"],"names":["CurrencyNameSelect","props","useTheme","currencyName","setCurrencyName","React","useState","anchorElEmoji","setAnchorElEmoji","emojiOpen","Boolean","emojiId","undefined","Grid","container","spacing","gridSpacing","alignItems","item","xs","IconButton","ref","aria-describedby","size","onClick","event","currentTarget","Popper","position","id","open","anchorEl","disablePortal","popperOptions","modifiers","name","options","offset","ClickAwayListener","onClickAway","MainCard","elevation","content","onEmojiClick","emojiObject","emoji","skinTone","SKIN_TONE_MEDIUM_DARK","disableAutoFocus","TextField","style","width","fullWidth","label","variant","value","onChange","e","target","useStyles","makeStyles","theme","temp","Settings","useContext","GameContext","game","startCurrency","setStartCurrency","isPublic","password","setPassword","setIsPublic","isEnded","setIsEnded","Typography","md","FormControlLabel","control","Switch","checked","color","WidgetStatistics","title","setTitle","desc","setDesc","bannerUrl","setBannerUrl","language","setLanguage","minRows","multiline","select","Object","keys","languages","map","key","index","MenuItem","toggleButton","backgroundColor","palette","error","main","DeleteGameDialog","setOpen","isLoading","setIsLoading","dispatch","useDispatch","user","useAuth","history","useHistory","handleClose","deleteGame","a","type","SNACKBAR_OPEN","message","alertSeverity","close","axios","delete","config","apiHost","push","response","data","toString","justifyContent","Button","Dialog","onClose","aria-labelledby","DialogTitle","fontSize","fontWeight","DialogContent","DialogContentText","DialogActions","sx","pr","CircularProgress","patch","gameId","$numberDecimal","GameSettings","setGame","updateSettings","obj","gameHosts","serverId","Helmet","MainSettings","AdvancedSettings"],"mappings":"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","file":"static/js/31.66633865.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport Picker, { SKIN_TONE_MEDIUM_DARK } from 'emoji-picker-react';\r\nimport { ClickAwayListener, Grid, IconButton, Popper, TextField } from '@material-ui/core';\r\n\r\nimport { gridSpacing } from '../../../store/constant';\r\n\r\nimport MoodTwoToneIcon from '@material-ui/icons/MoodTwoTone';\r\nimport GameContext from '../../../contexts/GameContext';\r\nimport MainCard from './../../../ui-component/cards/MainCard';\r\nimport AttachmentTwoToneIcon from '@material-ui/icons/AttachmentTwoTone';\r\nimport SendTwoToneIcon from '@material-ui/icons/SendTwoTone';\r\n\r\n//===========================|| WIDGET STATISTICS ||===========================//\r\n\r\nconst CurrencyNameSelect = (props) => {\r\n    const theme = useTheme();\r\n    const { currencyName, setCurrencyName } = props;\r\n    \r\n    // handle emoji\r\n    const onEmojiClick = (event, emojiObject) => {\r\n        setCurrencyName(currencyName + emojiObject.emoji);\r\n    };\r\n\r\n    const [anchorElEmoji, setAnchorElEmoji] = React.useState(null);\r\n    const handleOnEmojiButtonClick = (event) => {\r\n        setAnchorElEmoji(anchorElEmoji ? null : event.currentTarget);\r\n    };\r\n\r\n    const emojiOpen = Boolean(anchorElEmoji);\r\n    const emojiId = emojiOpen ? 'simple-popper' : undefined;\r\n    const handleCloseEmoji = () => {\r\n        setAnchorElEmoji(null);\r\n    };\r\n\r\n    return (\r\n        <Grid container spacing={gridSpacing} alignItems=\"center\">\r\n            <Grid item xs={1}>\r\n                <IconButton\r\n                    ref={anchorElEmoji}\r\n                    aria-describedby={emojiId}\r\n                    size=\"small\"\r\n                    onClick={handleOnEmojiButtonClick}\r\n                >\r\n                    <MoodTwoToneIcon />\r\n                </IconButton>\r\n                <Popper\r\n                    position=\"top\"\r\n                    id={emojiId}\r\n                    open={emojiOpen}\r\n                    anchorEl={anchorElEmoji}\r\n                    disablePortal\r\n                    popperOptions={{\r\n                        modifiers: [\r\n                            {\r\n                                name: 'offset',\r\n                                options: {\r\n                                    offset: [-20, 20]\r\n                                }\r\n                            }\r\n                        ]\r\n                    }}\r\n                >\r\n                    <ClickAwayListener onClickAway={handleCloseEmoji}>\r\n                        <MainCard elevation={8} content={false}>\r\n                            {' '}\r\n                            <Picker\r\n                                onEmojiClick={onEmojiClick}\r\n                                skinTone={SKIN_TONE_MEDIUM_DARK}\r\n                                disableAutoFocus={true}\r\n                            />\r\n                        </MainCard>\r\n                    </ClickAwayListener>\r\n                </Popper>\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n                <TextField\r\n                    style={{width: '100%'}}\r\n                    fullWidth\r\n                    label=\"Name/Symbol\"\r\n                    variant=\"outlined\"\r\n                    value={currencyName}\r\n                    onChange={(e) => setCurrencyName(e.target.value)}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default CurrencyNameSelect;\r\n","import React from 'react';\n\n// material-ui\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormControlLabel, Grid, Switch, Typography, useTheme, TextField } from '@material-ui/core';\n\nimport GameContext from '../../../contexts/GameContext';\nimport CurrencyNameSelect from './CurrencyNameSelect';\nimport { gridSpacing } from '../../../store/constant';\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    temp: {\n\n    }\n}));\n\nconst Settings = (props) => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const { game } = React.useContext(GameContext);\n    const { startCurrency, setStartCurrency, password, setPassword, isPublic, setIsPublic, currencyName, setCurrencyName, isEnded, setIsEnded} = props;\n\n    return (\n        <>\n            <Grid container spacing={gridSpacing}>\n                <Grid item xs={12}>\n                    <Typography variant=\"h3\">Accessibility</Typography>\n                </Grid>\n                <Grid item xs={6} md={6}>\n                    <FormControlLabel\n                        control={ <Switch checked={isPublic} onChange={() => setIsPublic(!isPublic)} name=\"isPublic\" color=\"primary\" /> }\n                        label=\"Public\"\n                    />\n                </Grid>\n                <Grid item xs={6} md={6}>\n                    <FormControlLabel\n                        control={ <Switch checked={isEnded} onChange={() => setIsEnded(!isEnded)} name=\"isEnded\" color=\"primary\" /> }\n                        label=\"Ended\"\n                    />\n                </Grid>\n                {/*}\n                <Grid item xs={12} md={6}>\n                    <TextField\n                        style={{width: '100%'}}\n                        fullWidth\n                        label=\"Password\"\n                        variant=\"outlined\"\n                        value={password}\n                        onChange={(e) => setStartCurrency(e.target.value)}\n                    />\n                </Grid>\n                {*/}\n            </Grid> \n            <br /><br />\n            <Grid container spacing={gridSpacing}>      \n                <Grid item xs={12}>\n                    <Typography variant=\"h3\">Currency</Typography>\n                    <br />\n                </Grid>\n                \n                <Grid item xs={12} md={6}>\n                    <CurrencyNameSelect currencyName={currencyName} setCurrencyName={setCurrencyName}/>\n                </Grid>\n\n                <Grid item xs={12} md={6}>\n                    <Grid item xs={12}>\n                        <TextField\n                            style={{width: '100%'}}\n                            fullWidth\n                            label=\"Start amount\"\n                            variant=\"outlined\"\n                            value={startCurrency}\n                            onChange={(e) => setStartCurrency(e.target.value)}\n                        />\n                    </Grid>   \n                </Grid>               \n            </Grid>\n        </>\n    );\n};\n\nexport default Settings;\n\n\n","import React from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { Grid, Typography, TextField, MenuItem } from '@material-ui/core';\r\n\r\nimport { gridSpacing } from '../../../store/constant';\r\nimport languages from '../../../utils/locales/languages.json';\r\nimport GameContext from '../../../contexts/GameContext';\r\n// assets\r\n\r\n\r\n//===========================|| WIDGET STATISTICS ||===========================//\r\n\r\nconst WidgetStatistics = (props) => {\r\n    const theme = useTheme();\r\n    const { game } = React.useContext(GameContext);\r\n    const { title, setTitle, desc, setDesc, bannerUrl, setBannerUrl, language, setLanguage } = props;\r\n    \r\n    return (\r\n        <>\r\n            <Grid container spacing={gridSpacing}>\r\n                <Grid item xs={12}>\r\n                    <Typography variant=\"h3\">\r\n                        Main\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} md={12}>\r\n                    <TextField\r\n                            style={{width: '100%'}}\r\n                            fullWidth\r\n                            label=\"Title\"\r\n                            variant=\"outlined\"\r\n                            value={title}\r\n                            onChange={(e) => setTitle(e.target.value)}\r\n                        />\r\n                </Grid>\r\n                <Grid item xs={12} md={12}>\r\n                    <TextField\r\n                            style={{width: '100%'}}\r\n                            fullWidth\r\n                            label=\"Description\"\r\n                            variant=\"outlined\"\r\n                            minRows=\"3\"\r\n                            multiline\r\n                            value={desc}\r\n                            onChange={(e) => setDesc(e.target.value)}\r\n                        />\r\n                </Grid>\r\n                <Grid item xs={12} md={12}>\r\n                    <TextField\r\n                            style={{width: '100%'}}\r\n                            fullWidth\r\n                            label=\"Banner Url\"\r\n                            variant=\"outlined\"\r\n                            value={bannerUrl}\r\n                            onChange={(e) => setBannerUrl(e.target.value)}\r\n                        />\r\n                </Grid>\r\n                <Grid item xs={12} md={12}>\r\n                    <TextField\r\n                    id=\"outlined-select-currency\"\r\n                    select\r\n                    fullWidth\r\n                    label=\"Language\"\r\n                    value={language}\r\n                    onChange={(e) => setLanguage(e.target.value)}\r\n                    variant=\"outlined\" >\r\n                    {Object.keys(languages).map((key, index) => (\r\n                        <MenuItem key={key} value={key}>\r\n                            {languages[key][0]}\r\n                        </MenuItem>\r\n                    ))}\r\n                    </TextField>\r\n                </Grid>\r\n            </Grid> \r\n        \r\n            {/*}\r\n            <Grid container spacing={gridSpacing}>      \r\n                <Grid item xs={12}>\r\n                    <Typography variant=\"h3\">Currency</Typography>\r\n                    <br />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12} md={6}>\r\n                    \r\n                </Grid>             \r\n            </Grid>\r\n           {*/}\r\n            \r\n            \r\n        </>\r\n    );\r\n};\r\n\r\nexport default WidgetStatistics;\r\n","\n// material-ui\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Slider, TextField, Typography, Grid, List, ListItem, ListItemIcon, ListItemText, CircularProgress } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport React, {useState, useEffect, useRef, useContext} from 'react';\nimport GameContext from '../../../contexts/GameContext';\nimport fct from '../../../utils/fct.js';\nimport AddCircleOutlineOutlinedIcon from '@material-ui/icons/AddCircleOutlineOutlined';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\n// project imports\nimport { useTheme } from '@material-ui/core/styles';\n\nimport { gridSpacing } from '../../../store/constant';\nimport { SNACKBAR_OPEN } from '../../../store/actions';\nimport useAuth from '../../../hooks/useAuth';\nimport axios from '../../../utils/axios';\nimport config from '../../../config';\n\nconst useStyles = makeStyles((theme) => ({\n    toggleButton: {\n        backgroundColor: theme.palette.error.main\n    }\n}));\n\nconst valueText = (value) => {\n    return `${value}°C`;\n}\n\n//===============================|| UI DIALOG - FORMS ||===============================//\n\nexport default function DeleteGameDialog(props) {\n    const theme = useTheme();\n    const classes = useStyles();\n    const { game } = useContext(GameContext);\n    const [open, setOpen] = React.useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const dispatch = useDispatch();\n    const { user } = useAuth();\n    const history = useHistory();\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const deleteGame = async () => {\n        setIsLoading(true);\n\n        if (!user) {\n            setIsLoading(false);\n            return dispatch({ type: SNACKBAR_OPEN, open: true, message: 'Please log in to delete the game!',\n                variant: 'alert', alertSeverity: 'error', close: true });\n        }\n        \n        try {\n            const response = await axios.delete(config.apiHost + '/v1/games/' + game.id, {});\n            history.push('/games/hosted');\n            //handleClose();\n        } catch (e) {\n            setIsLoading(false);\n\n            return dispatch({ type: SNACKBAR_OPEN, open: true, message:  e.response ? e.response.data.message : e.toString(),\n                variant: 'alert', alertSeverity: 'error', close: true });\n         }\n\n        setIsLoading(false);\n        dispatch({ type: SNACKBAR_OPEN, open: true, message: 'Successfully deleted game.', \n                variant: 'alert', alertSeverity: 'success', close: true });\n    };\n\n    return (\n        <Grid container justifyContent=\"center\">\n            <Button style={{width:'100%'}} variant=\"outlined\" color=\"error\" onClick={handleClickOpen}>\n                Delete game\n            </Button>\n\n            <Dialog fullWidth={true} open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" >\n                <DialogTitle id=\"form-dialog-title\">\n                    <Typography style={{fontSize:'1.7em',fontWeight: 'bold'}}>Delete game</Typography>\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Are you sure you want to delete the game? This will <br />\n                        - Remove the game.<br />\n                        - Remove all bets associated with the game.<br />\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions sx={{ pr: 2.5 }}>\n                    <Button onClick={handleClose} color=\"error\">\n                        Cancel\n                    </Button>\n                    <Button variant=\"contained\" size=\"small\" onClick={deleteGame} color=\"primary\">\n                        {isLoading ? (<> <CircularProgress color=\"secondary\"  size=\"1.7em\" /></>) : ('Accept') }  \n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Grid>\n    );\n}\n","\n// material-ui\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Slider, TextField, Typography, Grid, List, ListItem, ListItemIcon, ListItemText, CircularProgress } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport React, {useState, useEffect, useRef, useContext} from 'react';\nimport GameContext from '../../../contexts/GameContext';\nimport fct from '../../../utils/fct.js';\nimport AddCircleOutlineOutlinedIcon from '@material-ui/icons/AddCircleOutlineOutlined';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\n// project imports\nimport { useTheme } from '@material-ui/core/styles';\n\nimport { gridSpacing } from '../../../store/constant';\nimport { SNACKBAR_OPEN } from '../../../store/actions';\nimport useAuth from '../../../hooks/useAuth';\nimport axios from '../../../utils/axios';\nimport config from '../../../config';\n\nconst useStyles = makeStyles((theme) => ({\n    toggleButton: {\n        backgroundColor: theme.palette.error.main\n    }\n}));\n\nconst valueText = (value) => {\n    return `${value}°C`;\n}\n\n//===============================|| UI DIALOG - FORMS ||===============================//\n\nexport default function DeleteGameDialog(props) {\n    const theme = useTheme();\n    const classes = useStyles();\n    const { game } = useContext(GameContext);\n    const [open, setOpen] = React.useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const dispatch = useDispatch();\n    const { user } = useAuth();\n    const history = useHistory();\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const deleteGame = async () => {\n        setIsLoading(true);\n\n        if (!user) {\n            setIsLoading(false);\n            return dispatch({ type: SNACKBAR_OPEN, open: true, message: 'Please log in to edit member currency of the game!',\n                variant: 'alert', alertSeverity: 'error', close: true });\n        }\n        \n        try {\n            const response = await axios.patch(config.apiHost + '/v1/members/topUpStartCurrency', {gameId: game.id});\n            handleClose();\n        } catch (e) {\n            setIsLoading(false);\n\n            return dispatch({ type: SNACKBAR_OPEN, open: true, message:  e.response ? e.response.data.message : e.toString(),\n                variant: 'alert', alertSeverity: 'error', close: true });\n         }\n\n        setIsLoading(false);\n        dispatch({ type: SNACKBAR_OPEN, open: true, message: 'Successfully deleted game.', \n                variant: 'alert', alertSeverity: 'success', close: true });\n    };\n\n    return (\n        <Grid container justifyContent=\"center\">\n            <Button style={{width:'100%'}} variant=\"outlined\" color=\"warning\" onClick={handleClickOpen}>\n                Top-up currency of broke members\n            </Button>\n\n            <Dialog fullWidth={true} open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" >\n                <DialogTitle id=\"form-dialog-title\">\n                    <Typography style={{fontSize:'1.7em',fontWeight: 'bold'}}>Top-up currency of broke members</Typography>\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Are you sure you want to reset the currency of members, who currently own less than {game.startCurrency.$numberDecimal + ' ' + game.currencyName} back to {game.startCurrency.$numberDecimal + ' ' + game.currencyName}? Be aware: <br />\n                        - Currency that is spent on active bets will not be counted.<br />\n                        - Thus you might want to do this only when there is no open unpaid bets.<br />\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions sx={{ pr: 2.5 }}>\n                    <Button onClick={handleClose} color=\"error\">\n                        Cancel\n                    </Button>\n                    <Button variant=\"contained\" size=\"small\" onClick={deleteGame} color=\"primary\">\n                        {isLoading ? (<> <CircularProgress color=\"secondary\"  size=\"1.7em\" /></>) : ('Accept') }  \n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Grid>\n    );\n}\n","import React from 'react';\n\nimport AdvancedSettings from './AdvancedSettings';\nimport MainSettings from './MainSettings';\nimport DeleteGameDialog from './DeleteGameDialog';\nimport TopUpStartCurrencyDialog from './TopUpStartCurrencyDialog';\nimport { SNACKBAR_OPEN } from '../../../store/actions';\nimport { useDispatch } from 'react-redux';\nimport { Helmet } from \"react-helmet\";\n\n// project imports\nimport { gridSpacing } from '../../../store/constant';\nimport GameContext from '../../../contexts/GameContext';\nimport fct from '../../../utils/fct.js';\nimport axios from '../../../utils/axios';\nimport config from '../../../config';\nimport { Button, CircularProgress } from '@material-ui/core';\n\n\n//-----------------------|| PROFILE 1 - PROFILE ||-----------------------//\n\nconst GameSettings = () => {\n    const { game, setGame } = React.useContext(GameContext);\n    const dispatch = useDispatch();\n\n    const [ startCurrency, setStartCurrency ] =  React.useState(game.startCurrency.$numberDecimal);\n    const [ password, setPassword ] = React.useState('');\n    const [ title, setTitle ] = React.useState(game.title);\n    const [ currencyName, setCurrencyName ] = React.useState(game.currencyName);\n    const [ desc, setDesc ] = React.useState(game.desc);\n    const [ isPublic, setIsPublic ] = React.useState(game.isPublic);\n    const [ isEnded, setIsEnded ] = React.useState(game.isEnded);\n    const [ bannerUrl, setBannerUrl ] = React.useState(game.bannerUrl);\n    const [ language, setLanguage ] = React.useState(game.language);\n\n    const [ isLoading, setIsLoading ] = React.useState(false);\n\n    const updateSettings = async () => {\n        setIsLoading(true);\n\n        try {\n            const obj = { title, desc, isPublic, isEnded, startCurrency, currencyName, bannerUrl, language };\n            const response = await axios.patch(config.gameHosts[game.serverId] + '/v1/games/' + game.id, obj);\n            \n            dispatch({ type: SNACKBAR_OPEN, open: true, message: 'Successfully changed settings', \n                variant: 'alert', alertSeverity: 'success', close: true });\n            \n            setGame(response.data);\n            setIsLoading(false);\n        } catch (e) { \n            setIsLoading(false);\n            return dispatch({ type: SNACKBAR_OPEN, open: true, message:  e.response ? e.response.data.message : e.toString(),\n                variant: 'alert', alertSeverity: 'error', close: true });\n         }\n\n    };\n   \n    return (\n        <>\n        <Helmet>\n            <title>{game.title} - Settings</title>\n        </Helmet>\n\n        <MainSettings title={title} setTitle={setTitle} desc={desc} setDesc={setDesc} bannerUrl={bannerUrl} setBannerUrl={setBannerUrl} language={language} setLanguage={setLanguage} />\n        <br /><br />\n        <AdvancedSettings currencyName={currencyName} setCurrencyName={setCurrencyName} startCurrency={startCurrency} setStartCurrency={setStartCurrency} password={password} setPassword={setPassword} isPublic={isPublic} setIsPublic={setIsPublic} isEnded={isEnded} setIsEnded={setIsEnded} />\n        <br /><br />\n        <Button style={{width:'100%'}} variant=\"outlined\" color=\"secondary\" onClick={updateSettings}>\n            { isLoading ? (<> <CircularProgress color=\"secondary\"  size=\"1.7em\" /></>) : ('Update') }\n        </Button>\n        <br /><br />\n        <TopUpStartCurrencyDialog />\n        <br />\n        <DeleteGameDialog /> \n        </>\n        \n    );\n};\n\nexport default GameSettings;\n"],"sourceRoot":""}