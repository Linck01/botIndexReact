{"version":3,"sources":["ui-component/cards/GameCard1.js","views/HostedGames/AddGameDialog.js","views/HostedGames/index.js"],"names":["useStyles","makeStyles","theme","followerBlock","background","palette","mode","dark","main","grey","border","borderColor","textAlign","profileAvatar","margin","btnProfile","width","borderRadius","transition","height","active","success","light","color","reject","error","customerHeadDetails","verticalAlign","marginRight","marginTop","UserProfileCard","props","game","colors","useColors","classes","_jsxs","Card","className","sx","boxShadow","children","_jsx","CardMedia","component","image","bannerUrl","title","CardContent","p","pb","Grid","container","spacing","item","xs","Tooltip","length","Typography","variant","fct","cutString","style","paddingTop","currencyName","isEnded","Chip","label","size","alignItems","fontSize","primaryMain","IconUsers","infoDark","memberCount","IconCertificate","warningDark","betCount","Link","to","assembleGameOrBetUri","Button","startIcon","PlayCircleIcon","FormDialog","_ref","Object","assign","_objectDestructuringEmpty","_React$useState","React","useState","_React$useState2","_slicedToArray","open","setOpen","dispatch","useDispatch","getHostedGames","addGameTitleRef","useRef","_useState","_useState2","isLoading","setIsLoading","handleClose","createGame","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","current","querySelectorAll","value","axios","post","config","apiHost","type","SNACKBAR_OPEN","message","alertSeverity","close","t0","response","data","toString","stop","apply","arguments","justifyContent","AddCircleIcon","onClick","Dialog","fullWidth","onClose","DialogTitle","id","fontWeight","DialogContent","lg","TextField","ref","DialogActions","pr","_Fragment","CircularProgress","HostedGamesPage","_useState3","_useState4","hostedGames","setHostedGames","user","useAuth","_useState5","index","maxIndex","_useState6","page","setPage","get","params","userId","sortBy","limit","sent","results","_objectSpread","totalPages","console","log","handlePageChange","_callee2","a","b","c","_context2","_x","_x2","_x3","useEffect","Helmet","name","content","AddGameDialog","gridSpacing","map","GameCard1","direction","Pagination","onChange","count"],"mappings":"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","file":"static/js/29.3fb698e0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Button, Card, CardContent, CardMedia, Chip, Grid, Typography, Tooltip } from '@material-ui/core';\r\nimport useColors from '../../hooks/useColors';\r\nimport { IconUsers, IconCertificate } from '@tabler/icons';\r\nimport PlayCircleIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport fct from '../../utils/fct.js';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    followerBlock: {\r\n        background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50],\r\n        border: theme.palette.mode === 'dark' ? 'none' : '1px solid',\r\n        borderColor: theme.palette.grey[100],\r\n        textAlign: 'center'\r\n    },\r\n    profileAvatar: {\r\n        margin: 'auto auto 0'\r\n    },\r\n    btnProfile: {\r\n        width: '100%',\r\n        borderRadius: '4px',\r\n        transition: 'all .3s ease-in-out',\r\n        '& svg': {\r\n            width: '20px',\r\n            height: '20px',\r\n            margin: '4px 0px',\r\n            transition: 'all .3s ease-in-out'\r\n        }\r\n    },\r\n    active: {\r\n        background: theme.palette.mode === 'dark' ? theme.palette.dark.dark : theme.palette.success.light,\r\n        color: theme.palette.success.main\r\n    },\r\n    reject: {\r\n        background: theme.palette.mode === 'dark' ? theme.palette.dark.dark : theme.palette.error.light,\r\n        color: theme.palette.error.dark\r\n    },\r\n    customerHeadDetails: {\r\n        '& > svg': {\r\n            width: '15px',\r\n            height: '15px',\r\n            verticalAlign: 'text-top',\r\n            marginRight: '5px',\r\n            marginTop: '2px',\r\n        }\r\n    },\r\n}));\r\n\r\nconst UserProfileCard = (props) => {\r\n    const { game } = props;\r\n    const { colors } = useColors();\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.followerBlock} sx={{ boxShadow: 8 }}>\r\n            <CardMedia component=\"img\" image={ game.bannerUrl } title=\"banner\" sx={{ height: '125px' }} />\r\n            <CardContent sx={{ p: 2, pb: '16px !important' }}>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={12}>\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={12}>\r\n                                <Tooltip title={game.title.length >= 32 ? game.title : ''}>\r\n                                    <Typography className={classes.profileAvatar} variant=\"h4\">{fct.cutString(game.title,32)}</Typography>\r\n                                </Tooltip>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={4} style={{paddingTop: '12px'}}>\r\n                        {game.currencyName}\r\n\r\n                        {!game.isEnded ? (\r\n                            <Chip label=\"Active\" size=\"small\" className={classes.active} />\r\n                        ) : (\r\n                            <Chip label=\"Ended\" size=\"small\" className={classes.reject} />\r\n                        )} \r\n                    </Grid>\r\n                    <Grid item xs={8} alignItems=\"center\">  \r\n                        <Grid container spacing={1}>\r\n                            {/*}<Grid item xs={12} sm={12}>\r\n                                <Typography variant=\"body2\">{game.desc}</Typography>\r\n                            </Grid>{*/}\r\n                            <Grid item xs={6}>\r\n                                <Typography variant=\"body2\" style={{fontSize:'1.6em', color: colors.primaryMain}} className={classes.customerHeadDetails}>\r\n                                    <IconUsers  style={{width: '1em',height: '1em', color: colors.infoDark}} /> {game.memberCount}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Typography variant=\"body2\" style={{fontSize:'1.6em', color: colors.primaryMain}} className={classes.customerHeadDetails}>\r\n                                    <IconCertificate  style={{width: '1.1em',height: '1.1em', color: colors.warningDark}} /> {game.betCount}\r\n                                </Typography>\r\n                            </Grid><br /><br /><br />\r\n                        </Grid>\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={12}>\r\n                        <Link to={'/game/' + fct.assembleGameOrBetUri(game)}>\r\n                            <Button variant=\"contained\" color=\"primary\" className={classes.btnProfile} sx={{ boxShadow: 4 }} startIcon={<PlayCircleIcon />}>\r\n                                Play\r\n                            </Button>\r\n                        </Link>\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\n\r\nexport default UserProfileCard;\r\n","\n// material-ui\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField, \n    Typography, Grid, CircularProgress } from '@material-ui/core';\nimport React, {useState, useRef} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { SNACKBAR_OPEN } from '../../store/actions';\nimport axios from '../../utils/axios';\nimport config from '../../config';\nimport AddCircleIcon from '@material-ui/icons/AddCircleOutline';\n\nexport default function FormDialog({...props}) {\n    const [open, setOpen] = React.useState(false);\n    const dispatch = useDispatch();\n    const { getHostedGames } = props;\n    const addGameTitleRef = useRef(null);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n        setIsLoading(false);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const createGame = async () => {\n        if (isLoading)\n            return;\n\n        setIsLoading(true);\n\n        const title = addGameTitleRef.current.querySelectorAll('input')[0].value;\n        \n        try {\n            await axios.post(config.apiHost + '/v1/games/', { title });\n            setIsLoading(true);\n\n            dispatch({ type: SNACKBAR_OPEN, open: true, message: 'Successfully added Game', \n                variant: 'alert', alertSeverity: 'success', close: true });\n            \n            \n            getHostedGames();\n            handleClose();\n        \n        } catch (e) {\n            setIsLoading(false);\n            return dispatch({ type: SNACKBAR_OPEN, open: true, message:  e.response ? e.response.data.message : e.toString(),\n                variant: 'alert', alertSeverity: 'error', close: true });\n        }\n    };\n\n    /*\n    const upHandler = ({ key }) => {\n        if (key == 'Enter' && open == true) {\n            createGame();\n        }\n    };\n\n    useEffect(() => {\n        window.addEventListener(\"keyup\", upHandler);\n        return () => {\n            window.removeEventListener(\"keyup\", upHandler);\n        };\n    }, [open]);*/\n\n    return (\n        <Grid container justifyContent=\"center\">\n        \n            <Button style={{width:'100%'}} variant=\"contained\" color=\"secondary\" sx={{ boxShadow: 8 }} startIcon={<AddCircleIcon />} onClick={handleClickOpen}>\n                Create A New Game\n            </Button>\n               \n            <Dialog fullWidth={true} open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" >\n                <DialogTitle id=\"form-dialog-title\">\n                    <Typography style={{fontSize:'1.7em', fontWeight: 'bold'}}>Create a new Game</Typography>\n                </DialogTitle>\n                <DialogContent>\n                    {/*}<DialogContentText>\n                        <Typography variant=\"body2\">\n                            \n                        </Typography>\n                    </DialogContentText>{*/}\n                \n                   \n                    <Grid container spacing={1}>\n                        <Grid item xs={12} lg={12}>\n                            <TextField fullWidth ref={addGameTitleRef} id=\"outlined-basic\" label=\"Title\" />\n                        </Grid>                    \n                    </Grid>\n  \n                </DialogContent>\n                <DialogActions sx={{ pr: 2.5 }}>\n                    <Button onClick={handleClose} color=\"error\">\n                        Cancel\n                    </Button>\n                    <Button variant=\"contained\" size=\"small\" onClick={createGame} color=\"primary\">\n                        {isLoading ? (<> <CircularProgress color=\"secondary\"  size=\"1.7em\" /></>) : ('Create') }  \n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Grid>\n    );\n}\n","import React, {useState, useEffect } from 'react';\r\nimport { Typography, Grid, CircularProgress, Pagination } from '@material-ui/core';\r\nimport GameCard1 from '../../ui-component/cards/GameCard1';\r\nimport { gridSpacing } from '../../store/constant';\r\nimport { SNACKBAR_OPEN } from '../../store/actions';\r\nimport { useDispatch } from 'react-redux';\r\nimport useAuth from '../../hooks/useAuth';\r\nimport axios from '../../utils/axios';\r\nimport config from '../../config';\r\nimport AddGameDialog from './AddGameDialog';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst HostedGamesPage = () => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [hostedGames, setHostedGames] = useState([]);\r\n    const { user } = useAuth();\r\n    const [page, setPage] = useState({index: 1, maxIndex: 1});\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const getHostedGames = async () => {\r\n        setIsLoading(true);\r\n\r\n        try {\r\n            const response = await axios.get(config.apiHost + '/v1/games/', { params: { userId: user.id, sortBy: '-_createdAt', limit: 9 , page: page.index } });\r\n\r\n            setHostedGames(response.data.results);\r\n            setPage({...page, maxIndex: response.data.totalPages});\r\n            setIsLoading(false);\r\n        } catch (e) {\r\n            setIsLoading(false);\r\n            console.log(e);\r\n            return dispatch({ type: SNACKBAR_OPEN, open: true, message:  e.response ? e.response.data.message : e.toString(),\r\n                variant: 'alert', alertSeverity: 'error', close: true });\r\n        }\r\n    }\r\n\r\n    const handlePageChange = async (a,b,c) => {\r\n        setPage({...page, index: b});\r\n    }\r\n\r\n    useEffect(() => {\r\n        getHostedGames();\r\n    }, [page.index]);\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>Hosted Games</title>\r\n                <meta name='description' content='The games hosted by you.' />\r\n                <meta name='keywords' content='hosted,hosted games,own games,my games' />\r\n            </Helmet>\r\n\r\n            <AddGameDialog getHostedGames={getHostedGames}/>\r\n \r\n            {isLoading ? (\r\n                <><br /><br />  \r\n                <Grid item xs={12} lg={12} style={{ textAlign: 'center' }}>\r\n                    <CircularProgress color=\"secondary\" size=\"10em\"  />\r\n                </Grid>\r\n                </>\r\n            ) : ''}\r\n            \r\n            {!isLoading && hostedGames.length > 0 ? (\r\n                <><br />\r\n                <Grid container spacing={gridSpacing}>\r\n                    {hostedGames.map( (game) => {\r\n                        return (\r\n                            <Grid item xs={12} lg={4} key={game.id}>              \r\n                                <GameCard1 game={game} />     \r\n                            </Grid>\r\n                        );\r\n                    })}\r\n                </Grid>\r\n                </>\r\n            ) : ''}\r\n\r\n            {!isLoading && page.maxIndex > 1 ? (\r\n                <>\r\n                <br />\r\n                <Grid container direction=\"column\" spacing={2} alignItems=\"center\">\r\n                    <Grid item xs={12}>\r\n                        <Pagination page={page.index} onChange={handlePageChange} count={page.maxIndex} color=\"primary\" />\r\n                    </Grid>\r\n                </Grid>\r\n                </>\r\n            ) : ''}\r\n        \r\n            {!isLoading && hostedGames.length === 0 ? (\r\n                <><br /><br />\r\n                    <Grid container direction=\"column\" spacing={2} alignItems=\"center\">\r\n                        <Grid item xs={12}>\r\n                        <Typography variant=\"h3\">No games to show.</Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            ) : ''}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HostedGamesPage;\r\n"],"sourceRoot":""}