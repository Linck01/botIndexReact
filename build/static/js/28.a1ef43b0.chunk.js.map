{"version":3,"sources":["../node_modules/@material-ui/icons/AttachmentTwoTone.js","../node_modules/@material-ui/icons/SendTwoTone.js","views/game/Chat/ChartHistory.js","views/game/Chat/index.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","_createSvgIcon","_jsxRuntime","_default","jsx","d","React","jsxs","Fragment","children","opacity","ChartHistory","_ref","theme","data","scrollBarEl","wrapper","useRef","document","createElement","el","current","scrollToBottom","useCallback","scrollTop","scrollHeight","useEffect","length","_jsx","Grid","container","spacing","gridSpacing","ref","map","history","index","direction","_jsxs","item","style","marginBottom","Typography","variant","color","user","username","message","useStyles","makeStyles","ScrollHeight","width","height","overflowX","minHeight","GameChat","openChatDrawer","handleChatDrawerOpen","classes","useTheme","dispatch","useDispatch","useAuth","_useContext","useContext","GameContext","game","socket","chat","setChat","messageInputRef","scrollBarRef","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","isLoadingSend","setIsLoadingSend","getMessages","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","wrap","_context","prev","next","axios","get","config","gameHosts","serverId","params","gameId","id","sortBy","limit","page","sent","_objectSpread","isInitialized","items","results","reverse","t0","console","log","abrupt","type","SNACKBAR_OPEN","open","response","toString","alertSeverity","close","stop","apply","arguments","on","newMessage","newItems","concat","_toConsumableArray","off","handleOnSend","_ref3","_callee2","_context2","post","userId","querySelectorAll","_React$useState","_React$useState2","anchorElEmoji","setAnchorElEmoji","emojiOpen","Boolean","emojiId","undefined","_React$useState3","_React$useState4","setScrollBarEl","_Fragment","Helmet","title","MainCard","sx","bgcolor","palette","mode","PerfectScrollbar","className","containerRef","CardContent","justifyContent","CircularProgress","size","xs","alignItems","IconButton","onClick","event","currentTarget","MoodTwoToneIcon","Popper","position","anchorEl","disablePortal","popperOptions","modifiers","name","options","offset","ClickAwayListener","onClickAway","elevation","content","Picker","onEmojiClick","emojiObject","emoji","skinTone","SKIN_TONE_MEDIUM_DARK","disableAutoFocus","zeroMinWidth","TextField","fullWidth","label","onKeyPress","key","AttachmentTwoToneIcon","SendTwoToneIcon"],"mappings":"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","file":"static/js/28.a1ef43b0.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M18.5 16H7c-2.21 0-4-1.79-4-4s1.79-4 4-4h12.5c1.38 0 2.5 1.12 2.5 2.5S20.88 13 19.5 13H9c-.55 0-1-.45-1-1s.45-1 1-1h9.5V9.5H9c-1.38 0-2.5 1.12-2.5 2.5s1.12 2.5 2.5 2.5h10.5c2.21 0 4-1.79 4-4s-1.79-4-4-4H7c-3.04 0-5.5 2.46-5.5 5.5s2.46 5.5 5.5 5.5h11.5V16z\"\n}), 'AttachmentTwoTone');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {\n  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n    d: \"M4 8.25l7.51 1-7.5-3.22zm.01 9.72l7.5-3.22-7.51 1z\",\n    opacity: \".3\"\n  }), /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n    d: \"M2.01 3L2 10l15 2-15 2 .01 7L23 12 2.01 3zM4 8.25V6.03l7.51 3.22-7.51-1zm.01 9.72v-2.22l7.51-1-7.51 3.22z\"\n  })]\n}), 'SendTwoTone');\n\nexports.default = _default;","import * as PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { Grid, Typography } from '@material-ui/core';\nimport { gridSpacing } from '../../../store/constant';\n\nconst ChartHistory = ({ theme, data, scrollBarEl }) => {\n    // scroll to bottom when new message is sent or received\n    const wrapper = useRef(document.createElement('div'));\n    const el = wrapper.current;\n\n    const scrollToBottom = useCallback(() => {\n        if (scrollBarEl) scrollBarEl.scrollTop = scrollBarEl.scrollHeight;\n    }, [el]);\n\n    useEffect(() => {\n        scrollToBottom();\n    }, [data.length, scrollBarEl]);\n\n    return (\n        <Grid container spacing={gridSpacing} ref={wrapper}>\n            {data.map((history, index) => {\n                return (\n                    <React.Fragment key={index}>\n                        <Grid container direction=\"column\" spacing={1}>\n                            <Grid item style={{marginBottom: '2px'}}>                \n                                <Typography variant=\"title\" color=\"secondary.200\" >\n                                    {history.user.username + ': '}\n                                </Typography>\n                                <Typography variant=\"subheading\">\n                                    {history.message}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                    </React.Fragment>\n                );\n            })}\n        </Grid>  \n    );\n};\n\nChartHistory.propTypes = {\n    theme: PropTypes.object,\n    data: PropTypes.array,\n    user: PropTypes.object\n};\n\nexport default ChartHistory;\n","import React, { useState, useContext, useRef, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport config from '../../../config.js';\nimport { Helmet } from \"react-helmet\";\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { CardContent, ClickAwayListener, Grid, IconButton, Popper,\n    TextField, CircularProgress } from '@material-ui/core';\nimport { SNACKBAR_OPEN } from '../../../store/actions';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport Picker, { SKIN_TONE_MEDIUM_DARK } from 'emoji-picker-react';\nimport ChartHistory from './ChartHistory';\nimport MainCard from '../../../ui-component/cards/MainCard';\nimport axios from '../../../utils/axios';\nimport useAuth from '../../../hooks/useAuth';\nimport GameContext from '../../../contexts/GameContext';\nimport AttachmentTwoToneIcon from '@material-ui/icons/AttachmentTwoTone';\nimport SendTwoToneIcon from '@material-ui/icons/SendTwoTone';\nimport MoodTwoToneIcon from '@material-ui/icons/MoodTwoTone';\n\nconst useStyles = makeStyles((theme) => ({\n    ScrollHeight: {\n        width: '100%',\n        height: 'calc(100vh - 220px)', // HeaderTry 250px\n        overflowX: 'hidden',\n        minHeight: '10px'\n    }\n}));\n\nconst GameChat = ( { openChatDrawer, handleChatDrawerOpen } ) => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const dispatch = useDispatch();\n    const { user } = useAuth();\n    const { game, socket, chat, setChat} = useContext(GameContext);\n    const messageInputRef = useRef();\n    const scrollBarRef = useRef();\n    const [isLoading, setIsLoading] = useState(true);\n    const [isLoadingSend, setIsLoadingSend] = useState(false);\n\n    const getMessages = async () => {\n        setIsLoading(true);\n\n        try {\n            const res = await axios.get(config.gameHosts[game.serverId] + '/v1/messages/',\n                { params: { gameId: game.id, sortBy: '-_createdAt', limit: 100 , page: 0 } });\n            \n            setChat({...chat, isInitialized: true, items: res.data.results.reverse()});\n            setIsLoading(false);\n        } catch (e) {\n            setIsLoading(false);\n            console.log(e);\n            return dispatch({ type: SNACKBAR_OPEN, open: true, message:  e.response ? e.response.data.message : e.toString(),\n                variant: 'alert', alertSeverity: 'error', close: true });\n        }  \n    };\n\n    useEffect(() => {\n        if (socket)\n            socket.on('chatMessage', function(newMessage) {    \n                const newItems = [...chat.items, newMessage]\n                setChat({...chat, items: newItems});\n            });\n\n        return function cleanup() {\n            if (socket) \n                socket.off('chatMessage');\n        };\n\n    }, [socket,chat]);\n\n    useEffect(() => {\n        getMessages();     \n    }, []);\n\n    // handle new message form\n\n    const handleOnSend = async () => {\n        if (isLoadingSend)\n            return;\n\n        if (!user) {\n            return dispatch({ type: SNACKBAR_OPEN, open: true, message: 'Please log in to send a message!',\n                variant: 'alert', alertSeverity: 'error', close: true });\n        }\n\n        setIsLoadingSend(true);\n        try {\n            await axios.post(config.gameHosts[game.serverId] + '/v1/messages/', {\n                userId: user.id,\n                gameId: game.id,\n                message: messageInputRef.current.querySelectorAll('input[type=text]')[0].value\n            });\n\n            messageInputRef.current.querySelectorAll('input[type=text]')[0].value = '';\n            setIsLoadingSend(false);\n        } catch (e) {\n            setIsLoadingSend(false);\n            return dispatch({ type: SNACKBAR_OPEN, open: true, message:  e.response ? e.response.data.message : e.toString(),\n                variant: 'alert', alertSeverity: 'error', close: true });\n        }\n    };\n\n    const handleEnter = (event) => {\n        if (event.key !== 'Enter') {\n            return;\n        }\n\n        handleOnSend();\n    };\n\n    // handle emoji\n    const onEmojiClick = (event, emojiObject) => {\n        messageInputRef.current.querySelectorAll('input[type=text]')[0].value = \n        messageInputRef.current.querySelectorAll('input[type=text]')[0].value + emojiObject.emoji;\n    };\n\n    const [anchorElEmoji, setAnchorElEmoji] = React.useState(null);\n    const handleOnEmojiButtonClick = (event) => {\n        setAnchorElEmoji(anchorElEmoji ? null : event.currentTarget);\n    };\n\n    const emojiOpen = Boolean(anchorElEmoji);\n    const emojiId = emojiOpen ? 'simple-popper' : undefined;\n    const handleCloseEmoji = () => {\n        setAnchorElEmoji(null);\n    };\n\n    const [scrollBarEl, setScrollBarEl] = React.useState(null);\n    \n\n    return (\n        \n        <>\n            <Helmet>\n                <title>{game.title} - Chat</title>\n            </Helmet>\n        \n\n            {/*}<Grid container spacing={0.5}>\n                <Grid item xs={12} align='right'>\n                    <IconButton onClick={handleClickSort}>\n                        <MoreHorizTwoToneIcon />\n                    </IconButton>\n                    <Menu\n                        id=\"simple-menu\"\n                        anchorEl={anchorEl}\n                        keepMounted\n                        open={Boolean(anchorEl)}\n                        onClose={handleCloseSort}\n                        transformOrigin={{\n                            vertical: 'top',\n                            horizontal: 'center'\n                        }}\n                    >\n                        <MenuItem onClick={handleCloseSort}>Name</MenuItem>\n                        <MenuItem onClick={handleCloseSort}>Date</MenuItem>\n                        <MenuItem onClick={handleCloseSort}>Ratting</MenuItem>\n                        <MenuItem onClick={handleCloseSort}>Unread</MenuItem>\n                    </Menu>\n                </Grid>\n            </Grid>\n            <Divider sx={{ mt: theme.spacing(2) }} />{*/}\n            <MainCard sx={{\n                bgcolor: theme.palette.mode === 'dark' ? 'dark.main' : 'grey.50'\n            }}>\n            <PerfectScrollbar className={classes.ScrollHeight} containerRef={ref => {setScrollBarEl(ref);}}>\n                <CardContent>\n                    {isLoading ? (\n                        <>\n                        <br />\n                        <Grid container justifyContent=\"center\">\n                            \n                            <CircularProgress color=\"secondary\" size=\"10em\"  />\n                            \n                        </Grid>\n                        </>\n                    ) : <ChartHistory theme={theme} data={chat.items} scrollBarEl={scrollBarEl} scrollBarRef={scrollBarRef} />} \n                </CardContent>\n            </PerfectScrollbar>\n            </MainCard>\n            <br />\n            <Grid item xs={12}>\n                <Grid container spacing={1} alignItems=\"center\">\n                    <Grid item>\n                        <IconButton\n                            ref={anchorElEmoji}\n                            aria-describedby={emojiId}\n                            size=\"small\"\n                            onClick={handleOnEmojiButtonClick}\n                        >\n                            <MoodTwoToneIcon />\n                        </IconButton>\n                        <Popper\n                            position=\"top\"\n                            id={emojiId}\n                            open={emojiOpen}\n                            anchorEl={anchorElEmoji}\n                            disablePortal\n                            popperOptions={{\n                                modifiers: [\n                                    {\n                                        name: 'offset',\n                                        options: {\n                                            offset: [-20, 20]\n                                        }\n                                    }\n                                ]\n                            }}\n                        >\n                            <ClickAwayListener onClickAway={handleCloseEmoji}>\n                                <MainCard elevation={8} content={false}>\n                                    {' '}\n                                    <Picker\n                                        onEmojiClick={onEmojiClick}\n                                        skinTone={SKIN_TONE_MEDIUM_DARK}\n                                        disableAutoFocus={true}\n                                    />\n                                </MainCard>\n                            </ClickAwayListener>\n                        </Popper>\n                    </Grid>\n                    <Grid item xs zeroMinWidth>\n                        <TextField\n                            fullWidth\n                            label=\"Type a Message\"\n                            variant=\"outlined\"\n                            ref={messageInputRef}\n                            onKeyPress={handleEnter}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <IconButton size=\"small\">\n                            <AttachmentTwoToneIcon />\n                        </IconButton>\n                    </Grid>\n                    <Grid item>\n                        <IconButton size=\"small\" color=\"primary\" onClick={handleOnSend}>\n                            <SendTwoToneIcon />\n                        </IconButton>\n                    </Grid>\n                </Grid>\n            </Grid>\n            \n       </>\n\n    );\n};\n\nexport default GameChat;\n"],"sourceRoot":""}